# Low-level tests for the CXXR classes.

uname = $(shell uname)

top_builddir = ../..

top_srcdir = ../..

include $(top_builddir)/Makeconf

maindir = $(top_srcdir)/src/main

#ALL_CPPFLAGS = $(CPPFLAGS) -I../../include

EXTRA_LIBS = $(BLAS_LIBS) $(FLIBS) $(R_XTRA_LIBS)  $(READLINE_LIBS) $(LIBS)

# Thanks to Jochen Laubrock for suggestions about the handling of
# valgrind on non-Linux platforms.

valgrind = $(shell type -t valgrind > /dev/null \
             && echo "valgrind -q --leak-check=yes")

ifdef valgrind
valgrind_flags = -DVALGRIND_LEVEL=2
endif

sources_cxx = ArgMatchertest.cpp Allocatortest.cpp CellPooltest.cpp \
              GCManagertest.cpp HeterogeneousListtest.cpp MemoryBanktest.cpp \
              RObject_sizer.cpp splice_test.cpp

depends = $(sources_cxx:.cpp=.d)

# CellHeaptest omitted: CellHeap is no longer used, and it needs
# fixing on 64-bit Linux (reported by Sam Nicholls 2010-03-18).

tests = CellPooltest MemoryBanktest Allocatortest \
        HeterogeneousListtest splice_test SETLENGTHtest ArgMatchertest0 \
        ArgMatchertest1 ArgMatchertest2 ArgMatchertest3 ArgMatchertest4 \
        ArgMatchertest5 ArgMatchertest6 ArgMatchertest7 ArgMatchertest8

check : $(tests:=.ts)

ArgMatchertest.o : ArgMatchertest.cpp
	$(CXX) $(ALL_CPPFLAGS) $(ALL_CXXFLAGS) $(valgrind_flags) -c -o $@ $<

ifeq ($(uname),Darwin)
ArgMatchertest : ArgMatchertest.o ../../lib/libR.dylib
	ln -sf ../../lib/libR.dylib ../../lib/libRblas.dylib .
	$(LINK.cc) -o $@ $< -L../../lib -lR \
	           $(MAIN_LDFLAGS) $(EXTRA_LIBS)
else
ArgMatchertest : ArgMatchertest.o #../../src/main/libR.a
	$(LINK.cc) -o $@ $< -L../../lib -L../../src/main -Wl,-rpath,../../lib \
                   -lR -ldl $(MAIN_LDFLAGS) $(EXTRA_LIBS)
endif

# OK match:
ArgMatchertest0.ts : ArgMatchertest formals_ok.txt supplied_ok.txt \
                     prior_bindings.txt
	./$< formals_ok.txt supplied_ok.txt prior_bindings.txt \
	     > ArgMatchertest0.out 2>&1
	diff ArgMatchertest0.save ArgMatchertest0.out
	rm ArgMatchertest0.out
	touch $@
 
# Unnamed formal argument:
ArgMatchertest1.ts : ArgMatchertest formals_unnamed.txt
	-./$< formals_unnamed.txt /dev/null > ArgMatchertest1.out 2>&1
	diff ArgMatchertest1.save ArgMatchertest1.out
	rm ArgMatchertest1.out
	touch $@
 
# ... appears twice:
ArgMatchertest2.ts : ArgMatchertest formals_dotstwice.txt
	-./$< formals_dotstwice.txt /dev/null > ArgMatchertest2.out 2>&1
	diff ArgMatchertest2.save ArgMatchertest2.out
	rm ArgMatchertest2.out
	touch $@
 
# Duplicated formal name:
ArgMatchertest3.ts : ArgMatchertest formals_dupnames.txt
	-./$< formals_dupnames.txt /dev/null > ArgMatchertest3.out 2>&1
	diff ArgMatchertest3.save ArgMatchertest3.out
	rm ArgMatchertest3.out
	touch $@
 
# Formal arg partially matched by >1 supplied args:
ArgMatchertest4.ts : ArgMatchertest formals_ok.txt supplied_pm2supp.txt
	-./$< formals_ok.txt supplied_pm2supp.txt > ArgMatchertest4.out 2>&1
	diff ArgMatchertest4.save ArgMatchertest4.out
	rm ArgMatchertest4.out
	touch $@
 
# Supplied arg partially matches >1 formal args:
ArgMatchertest5.ts : ArgMatchertest formals_ok.txt supplied_pm2form.txt
	-./$< formals_ok.txt supplied_pm2form.txt > ArgMatchertest5.out 2>&1
	diff ArgMatchertest5.save ArgMatchertest5.out
	rm ArgMatchertest5.out
	touch $@
 
# Surplus supplied args:
ArgMatchertest6.ts : ArgMatchertest formals_ok.txt supplied_surplus.txt
	-./$< formals_nodots.txt supplied_surplus.txt > ArgMatchertest6.out 2>&1
	diff ArgMatchertest6.save ArgMatchertest6.out
	rm ArgMatchertest6.out
	touch $@
 
# ... with default:
ArgMatchertest7.ts : ArgMatchertest formals_dotsdflt.txt
	-./$< formals_dotsdflt.txt /dev/null > ArgMatchertest7.out 2>&1
	diff ArgMatchertest7.save ArgMatchertest7.out
	rm ArgMatchertest7.out
	touch $@
 
# Non-null match to '...', plus attempted partial match to formal following ... :
ArgMatchertest8.ts : ArgMatchertest formals_ok.txt supplied_surplus.txt \
                     prior_bindings.txt
	./$< formals_ok.txt supplied_surplus.txt prior_bindings.txt \
             > ArgMatchertest8.out 2>&1
	diff ArgMatchertest8.save ArgMatchertest8.out
	rm ArgMatchertest8.out
	touch $@
 
Allocatortest.o : Allocatortest.cpp
	$(CXX) $(ALL_CPPFLAGS) $(ALL_CXXFLAGS) $(valgrind_flags) -c -o $@ $<

Allocatortest_objs = Allocatortest.o MemoryBank.o CellPool.o

Allocatortest : $(Allocatortest_objs)
	$(LINK.cc) -o $@ $(Allocatortest_objs)

Allocatortest.ts : Allocatortest Allocatortest.save
	$(valgrind) ./$< 10 12 > Allocatortest.out
	diff Allocatortest.save Allocatortest.out
	rm Allocatortest.out
	touch $@

CellHeap.o : $(maindir)/CellHeap.cpp
	$(CXX) $(ALL_CPPFLAGS) $(ALL_CXXFLAGS) $(valgrind_flags) -c -o $@ $<

CellHeaptest.o : CellHeaptest.cpp
	$(CXX) $(ALL_CPPFLAGS) $(ALL_CXXFLAGS) $(valgrind_flags) -c -o $@ $<

CellHeaptest_objs = CellHeaptest.o CellHeap.o

CellHeaptest : $(CellHeaptest_objs)
	$(LINK.cc) -o $@ $(CellHeaptest_objs)

CellHeaptest.ts : CellHeaptest CellHeaptest.save
	$(valgrind) ./$< > CellHeaptest.out
	diff CellHeaptest.save CellHeaptest.out
	rm CellHeaptest.out
	touch $@

CellPool.o : $(maindir)/CellPool.cpp
	$(CXX) $(ALL_CPPFLAGS) $(ALL_CXXFLAGS) $(valgrind_flags) -c -o $@ $<

CellPooltest.o : CellPooltest.cpp
	$(CXX) $(ALL_CPPFLAGS) $(ALL_CXXFLAGS) $(valgrind_flags) -c -o $@ $<

CellPooltest_objs = CellPooltest.o CellPool.o

CellPooltest : $(CellPooltest_objs)
	$(LINK.cc) -o $@ $(CellPooltest_objs)

CellPooltest.ts : CellPooltest CellPooltest.save
	$(valgrind) ./$< > CellPooltest.out
	diff CellPooltest.save CellPooltest.out
	rm CellPooltest.out
	touch $@

GCManager.o : $(maindir)/GCManager.cpp
	$(CXX) $(ALL_CPPFLAGS) $(ALL_CXXFLAGS) -DDEBUG_ADJUST_HEAP -c -o $@ $<

GCManagertest_objs = GCManagertest.o CellPool.o GCManager.o MemoryBank.o

GCManagertest : $(GCManagertest_objs)
	$(LINK.cc) -o $@ $(GCManagertest_objs)

GCManagertest.ts : GCManagertest GCManagertest.save
	./$< > GCManagertest.out
	grep -v '^#' GCManagertest.save | diff - GCManagertest.out
	rm GCManagertest.out
	touch $@

GCNode.o : $(maindir)/GCNode.cpp
	$(CXX) $(ALL_CPPFLAGS) $(ALL_CXXFLAGS) -DDEBUG_ADJUST_HEAP -c -o $@ $<

GCRoot.o : $(maindir)/GCRoot.cpp
	$(CXX) $(ALL_CPPFLAGS) $(ALL_CXXFLAGS) -DDEBUG_ADJUST_HEAP -c -o $@ $<

HeterogeneousListtest.o : HeterogeneousListtest.cpp
	$(CXX) $(ALL_CPPFLAGS) $(ALL_CXXFLAGS) $(valgrind_flags) -c -o $@ $<

HeterogeneousList.o : $(maindir)/HeterogeneousList.cpp
	$(CXX) $(ALL_CPPFLAGS) $(ALL_CXXFLAGS) -c -o $@ $<

HeterogeneousListtest_objs =  HeterogeneousListtest.o HeterogeneousList.o

HeterogeneousListtest : $(HeterogeneousListtest_objs)
	$(LINK.cc) -o $@ $(HeterogeneousListtest_objs)

HeterogeneousListtest.ts : HeterogeneousListtest HeterogeneousListtest.save
	./$< > HeterogeneousListtest.out
	diff HeterogeneousListtest.save HeterogeneousListtest.out
	rm HeterogeneousListtest.out
	touch $@

MemoryBank.o : $(maindir)/MemoryBank.cpp
	$(CXX) $(ALL_CPPFLAGS) $(ALL_CXXFLAGS) $(valgrind_flags) -DR_MEMORY_PROFILING -c -o $@ $<

MemoryBanktest.o : MemoryBanktest.cpp
	$(CXX) $(ALL_CPPFLAGS) $(ALL_CXXFLAGS) $(valgrind_flags) -DR_MEMORY_PROFILING -c -o $@ $<

MemoryBanktest_objs = MemoryBanktest.o MemoryBank.o CellPool.o

MemoryBanktest : $(MemoryBanktest_objs)
	$(LINK.cc) -o $@ $(MemoryBanktest_objs)

MemoryBanktest.ts : MemoryBanktest MemoryBanktest.save
	$(valgrind) ./$< 10 12 > MemoryBanktest.out
	diff MemoryBanktest.save MemoryBanktest.out
	rm MemoryBanktest.out
	touch $@

ifeq ($(uname),Darwin)
SETLENGTHtest : SETLENGTHtest.o ../../lib/libR.dylib
	ln -sf ../../lib/libR.dylib ../../lib/libRblas.dylib .
	$(LINK.cc) -o $@ $< -L../../lib -lR \
	           $(MAIN_LDFLAGS) $(EXTRA_LIBS)
else
SETLENGTHtest : SETLENGTHtest.o #../../src/main/libR.a
	$(LINK.cc) -o $@ $< -L../../lib -L../../src/main -Wl,-rpath,../../lib \
                   -lR -ldl $(MAIN_LDFLAGS) $(EXTRA_LIBS)
endif

SETLENGTHtest.ts : SETLENGTHtest SETLENGTHtest.save
	-./$< > SETLENGTHtest.out 2>&1
	diff SETLENGTHtest.save SETLENGTHtest.out
	rm SETLENGTHtest.out
	touch $@

RObject_sizer : RObject_sizer.o #../../src/main/libR.a
	$(LINK.cc) -o $@ $< -L../../lib -L../../src/main -Wl,-rpath,../../lib \
                   -lR -ldl $(MAIN_LDFLAGS) $(EXTRA_LIBS)

splice_test : splice_test.o
	$(LINK.cc) -o $@ $<

splice_test.ts : splice_test splice_test.save
	./$< > splice_test.out
	diff splice_test.save splice_test.out
	rm splice_test.out
	touch $@

Makefile : Makefile.in
	cp $< $@

clean:
	rm -f *.d *.o *.ts $(tests)

distclean: clean
	rm -f Makefile

include $(depends)
