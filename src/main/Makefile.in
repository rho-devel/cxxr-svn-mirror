#CXXR $Id$
#CXXR 
#CXXR This file is part of CXXR, a project to refactor the R interpreter
#CXXR into C++.  It may consist in whole or in part of program code and
#CXXR documentation taken from the R project itself, incorporated into
#CXXR CXXR (and possibly MODIFIED) under the terms of the GNU General Public
#CXXR Licence.
#CXXR 
#CXXR CXXR is Copyright (C) 2008 Andrew R. Runnalls, subject to such other
#CXXR copyrights and copyright restrictions as may be stated below.
#CXXR 
#CXXR CXXR is not part of the R project, and bugs and other issues should
#CXXR not be reported via r-bugs or other R project channels; instead refer
#CXXR to the CXXR website.

#
# ${R_HOME}/src/main/Makefile

VPATH = @srcdir@
srcdir = @srcdir@
top_srcdir = @top_srcdir@

top_builddir = ../..
subdir = src/main
# next is needed for shared BLAS
R_HOME=$(top_builddir)

include $(top_builddir)/Makeconf

SOURCES_C = RNG.c complex.c gram.c gramRd.c inlined.c regex.c \
            unzip.c

SOURCES_CXX = \
	BuiltInFunction.cpp ByteCode.cpp \
	CConverters.cpp CachedString.cpp CellPool.cpp \
	Closure.cpp CommandLineArgs.cpp ComplexVector.cpp ConsCell.cpp \
	DotInternal.cpp DottedArgs.cpp \
	Environment.cpp Expression.cpp ExpressionVector.cpp \
        ExternalPointer.cpp \
        Frame.cpp FunctionBase.cpp \
        GCEdge.cpp GCManager.cpp GCNode.cpp GCRoot.cpp GCStackRoot.cpp \
	HeterogeneousList.cpp \
        inspect.cpp IntVector.cpp \
	ListVector.cpp LogicalVector.cpp \
	MemoryBank.cpp \
        PairList.cpp Promise.cpp \
        RAllocStack.cpp RObject.cpp RawVector.cpp Rdynload.cpp RealVector.cpp \
        Renviron.cpp \
        S4Object.cpp SEXP_downcast.cpp StdFrame.cpp String.cpp \
	StringVector.cpp Symbol.cpp \
	UncachedString.cpp \
        VectorBase.cpp \
        WeakRef.cpp \
	apply.cpp apse.cpp arithmetic.cpp array.cpp attrib.cpp \
	base.cpp bind.cpp builtin.cpp \
	character.cpp coerce.cpp colors.cpp connections.cpp context.cpp \
	cov.cpp cum.cpp \
	dcf.cpp datetime.cpp debug.cpp deparse.cpp deriv.cpp devices.cpp \
	dotcode.cpp dounzip.cpp dstruct.cpp duplicate.cpp \
	engine.cpp envir.cpp errors.cpp eval.cpp \
	format.cpp fourier.cpp \
	gevents.cpp gram-ex.cpp graphics.cpp \
	identical.cpp internet.cpp iosupport.cpp \
	lapack.cpp list.cpp localecharset.cpp logic.cpp \
	main.cpp mapply.cpp match.cpp memory.cpp model.cpp \
	names.cpp objects.cpp optim.cpp optimize.cpp options.cpp \
	par.cpp paste.cpp pcre.cpp platform.cpp \
	plot.cpp plot3d.cpp plotmath.cpp \
	print.cpp printarray.cpp printvector.cpp printutils.cpp qsort.cpp \
	random.cpp registration.cpp relop.cpp rlocale.cpp \
	saveload.cpp scan.cpp seq.cpp serialize.cpp size.cpp sort.cpp \
        source.cpp split.cpp sprintf.cpp startup.cpp subassign.cpp \
        subscript.cpp subset.cpp summary.cpp sysutils.cpp \
	unique.cpp util.cpp \
	version.cpp vfonts.cpp

SOURCES_F = \
	xxxpr.f

## If the substitutes are needed, the corresponding objects are put by
## configure in @LIBOBJS@ @ALLOCA@
EXTRA_SOURCES_CXX = \
	Rmain.cpp \
	alloca.cpp acosh.cpp asinh.cpp atanh.cpp \
	mkdtemp.cpp \
	snprintf.cpp strdup.cpp strncasecmp.cpp \
	vsnprintf.cpp xspline.cpp

DEPENDS = $(SOURCES_C:.c=.d) $(SOURCES_CXX:.cpp=.d) \
          $(EXTRA_SOURCES_CXX:.cpp=.d)
SOURCES = $(SOURCES_C) $(SOURCES_CXX) $(SOURCES_F)
OBJECTS = $(SOURCES_C:.c=.o) $(SOURCES_CXX:.cpp=.o) $(SOURCES_F:.f=.o) \
          @LIBOBJS@ @ALLOCA@
HEADERS = \
	RBufferUtils.h Rregex.h Rstrptime.h \
	arithmetic.h apse.h \
	basedecl.h \
	par-common.c \
	qsort-body.c \
	rlocale_data.h \
	unzip.h

distdir = $(top_builddir)/$(PACKAGE)-$(VERSION)/$(subdir)
DISTFILES = Makefile.in Makefile.win \
	$(HEADERS) \
        $(SOURCES_C) \
	$(SOURCES_CXX) \
	$(EXTRA_SOURCES_CXX) \
	$(SOURCES_F) \
	gram.y \
	gramRd.y

ZLIB_CPPFLAGS = @BUILD_ZLIB_TRUE@ -I$(top_srcdir)/src/extra/zlib
BZLIB_CPPFLAGS = @BUILD_BZLIB_TRUE@ -I$(top_srcdir)/src/extra/bzip2
PCRE_CPPFLAGS = @BUILD_PCRE_TRUE@ -I$(top_srcdir)/src/extra/pcre
XDR_CPPFLAGS = @BUILD_XDR_TRUE@ -I$(top_srcdir)/src/extra/xdr

ALL_CPPFLAGS = $(ZLIB_CPPFLAGS) $(BZLIB_CPPFLAGS) $(PCRE_CPPFLAGS) \
  $(XDR_CPPFLAGS) $(R_XTRA_CPPFLAGS) $(CPPFLAGS) $(DEFS)
@WANT_R_SHLIB_TRUE@ALL_CFLAGS = $(ALL_CFLAGS_LO)
@WANT_R_SHLIB_TRUE@ALL_FFLAGS = $(ALL_FFLAGS_LO)


## use an explicit library: there might be an unsatisfactory -lz around
R_ZLIBS = @BUILD_ZLIB_TRUE@ ../extra/zlib/libz.a
R_BZLIBS = @BUILD_BZLIB_TRUE@ ../extra/bzip2/libbz2.a
R_PCRE = @BUILD_PCRE_TRUE@ ../extra/pcre/libpcre.a
R_XDR = @BUILD_XDR_TRUE@ ../extra/xdr/libxdr.a
R_LIBINTL = @BUILD_LIBINTL_TRUE@ ../extra/intl/libintl.a

MAIN_LIBS = ../unix/libunix.a ../appl/libappl.a ../nmath/libnmath.a
EXTRA_STATIC_LIBS = $(R_ZLIBS) $(R_BZLIBS) $(R_PCRE) $(R_XDR)$(R_LIBINTL)
STATIC_LIBS = $(MAIN_LIBS) $(EXTRA_STATIC_LIBS)

EXTRA_LIBS = $(BLAS_LIBS) $(FLIBS) $(R_XTRA_LIBS) @LIBINTL@ $(READLINE_LIBS) $(LIBS)

R_binary = R.bin
R_bin_OBJECTS = Rmain.o VectorBase.o
@WANT_R_SHLIB_FALSE@R_bin_LDADD = libR.a $(EXTRA_LIBS)
## Linked against -lRblas becasue -lR is and otherwise ld complains.
@WANT_R_SHLIB_TRUE@R_bin_LDADD = -L../../lib@R_ARCH@ -lR @BLAS_SHLIB_TRUE@-lRblas
R_bin_DEPENDENCIES =@WANT_R_SHLIB_FALSE@ libR.a @USE_EXPORTFILES_TRUE@ $(top_builddir)/etc/R.exp

libR_la = libR$(DYLIB_EXT)
## have to force in Rembedded.o
libR_la_OBJECTS = $(OBJECTS) ../unix/Rembedded.o
libR_la_LIBADD = $(STATIC_LIBS) $(EXTRA_LIBS) @WANT_R_SHLIB_TRUE@ @USE_EXPORTFILES_TRUE@ -Wl,-bE:$(top_builddir)/etc/R.exp
libR_la_DEPENDENCIES = $(STATIC_LIBS) @WANT_R_SHLIB_TRUE@ @USE_EXPORTFILES_TRUE@ $(top_builddir)/etc/R.exp

## The next is needed on darwin only at present
LIBR_LDFLAGS = @LIBR_LDFLAGS@

%.bakc : %.cpp ../scripts/CXXR/uncxxr.pl
	../scripts/CXXR/uncxxr.pl $< > $@

all: Makefile Makedeps R

Makefile: $(srcdir)/Makefile.in \
  $(top_builddir)/config.status \
  ../include/config.h \
  ../include/Rversion.h \
  $(SOURCES_C) $(SOURCES_CXX) $(EXTRA_SOURCES_CXX)
	@cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@

Makedeps: Makefile $(DEPENDS)
	@touch $@

## This target has been changed to ensure that R.bin and libR get
## installed in the build tree if necessary, even if the corresponding 
## objects are not re-made.
## Note that dependencies in the test Makefiles depend on these objects,
## so copy-if-change is used.
R: Makefile
	@$(MAKE) Makedeps
@WANT_R_SHLIB_TRUE@	@$(MAKE) install-lib-local
@WANT_R_STATIC_TRUE@	@$(MAKE) install-static-local
	@$(MAKE) install-bin-local


## is this portable?  Documented as GNU extension.
../include/config.h ../include/Rversion.h:
	(cd $(@D); $(MAKE) $(@F))

$(R_binary): $(R_bin_OBJECTS) $(R_bin_DEPENDENCIES)
	$(LINK.cpp) $(MAIN_LDFLAGS) -o $@ $(R_bin_OBJECTS) $(R_bin_LDADD)

libR.a: $(OBJECTS) $(STATIC_LIBS)
	-@mkdir libs
	@(cd libs; for l in $(STATIC_LIBS); do $(AR) x ../$$l; done)
	@rm -rf $@
	$(AR) cr $@ $(OBJECTS) libs/*o
	$(RANLIB) $@
	@rm -rf libs

install-bin-local: $(R_binary)
	@$(MAKE) rhome="$(abs_top_builddir)" install-bin

install-static-local: libR.a
	@$(MAKE) rhome="$(abs_top_builddir)" install-static

$(top_builddir)/etc/R.exp: $(OBJECTS) $(MAIN_LIBS)
	@$(SHELL) $(top_srcdir)/tools/ldAIX4 -o $@ $(OBJECTS) $(MAIN_LIBS)

## is this portable?  Documented as GNU extension.
$(MAIN_LIBS):
	(cd $(@D); $(MAKE) $(@F))

../extra/bzip2/libbz2.a ../extra/pcre/libpcre.a ../extra/xdr/libxdr.a ../extra/zlib/libz.a ../extra/intl/libintl.a:
	(cd $(@D); $(MAKE))


libR: $(libR_la)

$(libR_la): $(libR_la_OBJECTS) $(libR_la_DEPENDENCIES)
	$(DYLIB_LINK) $(LIBR_LDFLAGS) -o $@ $(libR_la_OBJECTS) $(libR_la_LIBADD)

install-lib-local: $(libR_la)
	@$(MAKE) rhome="$(abs_top_builddir)" install-lib


# suppress #line directives
YFLAGS=-l

$(srcdir)/gram.c: @MAINTAINER_MODE_TRUE@ $(srcdir)/gram.y
	@$(ECHO) "re-making gram.c"
	$(YACC) $(YFLAGS) $(srcdir)/gram.y
	$(SHELL) $(top_srcdir)/tools/move-if-change y.tab.c $(srcdir)/gram.c
$(srcdir)/gramRd.c: @MAINTAINER_MODE_TRUE@ $(srcdir)/gramRd.y
	@$(ECHO) "re-making gramRd.c"
	$(YACC) $(YFLAGS) $(srcdir)/gramRd.y
	$(SHELL) $(top_srcdir)/tools/move-if-change y.tab.c $(srcdir)/gramRd.c	

install: installdirs
	@$(MAKE) install-bin
	@if test -f $(libR_la); then $(MAKE) install-lib; fi
@WANT_R_STATIC_TRUE@	@$(MAKE) install-static
installdirs:
	@$(MKINSTALLDIRS) "$(DESTDIR)$(Rexecbindir2)"
	@$(MKINSTALLDIRS) "$(DESTDIR)$(Rexeclibdir)"
install-bin: installdirs
	@$(SHELL) $(top_srcdir)/tools/copy-if-change $(R_binary) "$(DESTDIR)$(Rexecbindir2)/R"
install-lib: installdirs
	@$(SHELL) $(top_srcdir)/tools/copy-if-change $(libR_la) "$(DESTDIR)$(Rexeclibdir)/$(libR_la)"
install-static: installdirs
	@$(SHELL) $(top_srcdir)/tools/copy-if-change libR.a "$(DESTDIR)$(Rexeclibdir)/libR.a"
install-strip: installdirs
	@${INSTALL_PROGRAM} -s $(R_binary) "$(DESTDIR)$(Rexecbindir2)/R"
	@if test -f $(libR_la); then $(MAKE) install-lib; fi
@WANT_R_STATIC_TRUE@	@$(MAKE) install-static
	@if test -n "$(STRIP_LIBS)"; then \
	  if test -f $(libR_la); then $(STRIP_LIBS) "$(DESTDIR)$(Rexeclibdir)/$(libR_la)"; fi; \
	fi
	@if test -n "$(STRIP_STATIC_LIBS)"; then \
	  if test -f libR.a; then $(STRIP_STATIC_LIBS) "$(DESTDIR)$(Rexeclibdir)/libR.a"; fi; \
	fi
uninstall:
	@rm -f "$(DESTDIR)$(Rexecbindir)/exec/$(R_ARCH)/R" "$(DESTDIR)$(Rexecbindir)/R.bin"
	@rm -f "$(DESTDIR)$(Rexeclibdir)/libR$(DYLIB_EXT)"
	@rm -f "$(DESTDIR)$(Rexeclibdir)/libR.a"

mostlyclean: clean
clean:
	@-rm -f $(top_builddir)/etc/R.exp
	@-rm -rf .libs _libs
	@-rm -f *core Makedeps *.d *.o *.lo *.la *$(DYLIB_EXT) \
	  $(R_binary) libR.a
distclean: clean
	@-rm -f Makefile
maintainer-clean: distclean
	@$(ECHO) "This command is intended for maintainers to use; it"
	@$(ECHO) "deletes files that may need special rules to rebuild"
	@-rm -f $(srcdir)/gram.c $(srcdir)/gramRd.c

tags: TAGS
TAGS: $(SOURCES) $(EXTRA_SOURCES_CXX) $(HEADERS)
	etags $(SOURCES) $(EXTRA_SOURCES_CXX) $(HEADERS)

## Unused targets
info dvi check:

distdir: $(DISTFILES)
	@for f in $(DISTFILES); do \
	  test -f $(distdir)/$${f} \
	    || ln $(srcdir)/$${f} $(distdir)/$${f} 2>/dev/null \
	    || cp -p $(srcdir)/$${f} $(distdir)/$${f}; \
	done
	@if test -f $(srcdir)/TAOCP1997.c ; then \
	  cp -p $(srcdir)/TAOCP1997.c $(distdir)/TAOCP1997.c; \
	fi

include $(DEPENDS)
